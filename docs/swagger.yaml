basePath: /api/v1
definitions:
  modules_hotel_api_model_req.MediaJSON:
    properties:
      urls:
        items:
          type: string
        type: array
    type: object
  modules_hotel_room_api_model_req.MediaJSON:
    properties:
      urls:
        items:
          type: string
        type: array
    type: object
  req.ChangePasswordReq:
    properties:
      new_pwd:
        type: string
        x-order: "2"
      old_pwd:
        type: string
        x-order: "1"
    required:
    - new_pwd
    - old_pwd
    type: object
  req.CoordinatesJSON:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  req.CreateDestinationReq:
    properties:
      code:
        type: string
      name:
        type: string
      unit:
        type: string
    required:
    - code
    - name
    - unit
    type: object
  req.CreateHotelEmpReq:
    properties:
      base_salary:
        type: integer
        x-order: "5"
      contract:
        enum:
        - FULL_TIME
        - PART_TIME
        - INTERNSHIP
        example: FULL_TIME | PART_TIME | INTERNSHIP
        type: string
        x-order: "4"
      email:
        type: string
        x-order: "2"
      full_name:
        type: string
        x-order: "1"
      phone:
        type: string
        x-order: "3"
    required:
    - base_salary
    - contract
    - email
    - full_name
    - phone
    type: object
  req.CreateHotelOwnerReq:
    properties:
      email:
        type: string
        x-order: "2"
      full_name:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "4"
      phone:
        type: string
        x-order: "3"
    required:
    - email
    - full_name
    - password
    - phone
    type: object
  req.CreateHotelReq:
    properties:
      address_detail:
        type: string
        x-order: "9"
      check_in_time:
        type: string
        x-order: "4"
      check_out_time:
        type: string
        x-order: "5"
      coordinates:
        allOf:
        - $ref: '#/definitions/req.CoordinatesJSON'
        x-order: "12"
      description:
        type: string
        x-order: "10"
      district_code:
        type: string
        x-order: "7"
      email:
        type: string
        x-order: "2"
      facilities:
        allOf:
        - $ref: '#/definitions/req.HotelFacilitiesJSON'
        x-order: "11"
      images:
        allOf:
        - $ref: '#/definitions/modules_hotel_api_model_req.MediaJSON'
        x-order: "14"
      name:
        type: string
        x-order: "1"
      phone:
        type: string
        x-order: "3"
      province_code:
        type: string
        x-order: "6"
      videos:
        allOf:
        - $ref: '#/definitions/modules_hotel_api_model_req.MediaJSON'
        x-order: "13"
      ward_code:
        type: string
        x-order: "8"
    required:
    - address_detail
    - check_in_time
    - check_out_time
    - description
    - district_code
    - email
    - name
    - phone
    - province_code
    - ward_code
    type: object
  req.CreateHotelRoomReq:
    properties:
      description:
        type: string
        x-order: "3"
      discount_rate:
        type: integer
        x-order: "5"
      facilities:
        allOf:
        - $ref: '#/definitions/req.HotelRoomFacilitiesJSON'
        x-order: "9"
      hotel_id:
        type: string
        x-order: "1"
      images:
        allOf:
        - $ref: '#/definitions/modules_hotel_room_api_model_req.MediaJSON'
        x-order: "8"
      original_price:
        type: integer
        x-order: "6"
      quantity:
        type: integer
        x-order: "4"
      type:
        type: string
        x-order: "2"
      videos:
        allOf:
        - $ref: '#/definitions/modules_hotel_room_api_model_req.MediaJSON'
        x-order: "7"
    required:
    - description
    - facilities
    - hotel_id
    - original_price
    - quantity
    - type
    type: object
  req.CreateUserReq:
    properties:
      email:
        type: string
        x-order: "2"
      full_name:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "4"
      phone:
        type: string
        x-order: "3"
    required:
    - email
    - full_name
    - password
    type: object
  req.HotelFacilitiesJSON:
    properties:
      airport_transfer:
        type: boolean
      conference_room:
        type: boolean
      fitness_center:
        type: boolean
      food_service:
        type: boolean
      free_wifi:
        type: boolean
      laundry_service:
        type: boolean
      motor_bike_rental:
        type: boolean
      parking_area:
        type: boolean
      spa_service:
        type: boolean
      swimming_pool:
        type: boolean
    type: object
  req.HotelRoomFacilitiesJSON:
    properties:
      air_conditioner:
        type: boolean
      balcony:
        description: 'Default: false'
        type: boolean
      bath_tub:
        type: boolean
      hair_dryer:
        type: boolean
      kitchen:
        type: boolean
      non_smoking:
        type: boolean
      number_of_bed:
        type: integer
      room_size:
        type: integer
      shower:
        type: boolean
      sleeps:
        allOf:
        - $ref: '#/definitions/req.SleepJSON'
        description: Jsonb
      slippers:
        type: boolean
      television:
        description: 'Default: true'
        type: boolean
      view:
        type: string
    type: object
  req.LoginHotelEmpReq:
    properties:
      email:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "2"
    required:
    - email
    - password
    type: object
  req.LoginUserReq:
    properties:
      email:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "2"
    required:
    - email
    - password
    type: object
  req.ResetPasswordReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  req.SleepJSON:
    properties:
      adults:
        type: integer
      children:
        type: integer
    type: object
  req.UpdateUserReq:
    properties:
      email:
        type: string
        x-order: "2"
      full_name:
        type: string
        x-order: "1"
      phone:
        type: string
        x-order: "3"
    type: object
  res.ErrorResponse:
    properties:
      error_key:
        type: string
      log:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  res.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
host: 52.163.61.213:8888
info:
  contact:
    email: support@trekkstay.com
    name: Trekkstay Team
    url: https://www.trekkstay.com
  description: API system for Trekkstay - Hotel Booking System
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://swagger.io/
  title: Trekkstay - Hotel Booking System API
  version: v0.0.1
paths:
  /destination/create:
    post:
      description: Create new destination
      parameters:
      - description: CreateDestinationReq JSON
        in: body
        name: CreateDestinationReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateDestinationReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Create new destination
      tags:
      - Destination
  /destination/list:
    get:
      description: List destination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: List destination
      tags:
      - Destination
  /hotel-emp/create-emp:
    post:
      description: Create new hotel employee account, require hotel owner permission
        and hotel profile already created
      parameters:
      - description: CreateHotelEmpReq JSON
        in: body
        name: CreateHotelEmpReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateHotelEmpReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Create new hotel employee account
      tags:
      - Hotel Employee
  /hotel-emp/create-owner:
    post:
      description: Create new hotel owner account
      parameters:
      - description: CreateHotelOwnerReq JSON
        in: body
        name: CreateHotelOwnerReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateHotelOwnerReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Create new hotel owner account
      tags:
      - Hotel Employee
  /hotel-emp/login:
    post:
      description: Login hotel employee by email and password
      parameters:
      - description: LoginHotelEmpReq JSON
        in: body
        name: LoginHotelEmpReq
        required: true
        schema:
          $ref: '#/definitions/req.LoginHotelEmpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Login hotel employee
      tags:
      - Hotel Employee
  /hotel-room/create:
    post:
      description: Create new hotel room, requires authentication with owner role
      parameters:
      - description: CreateHotelRoomReq JSON
        in: body
        name: CreateHotelRoomReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateHotelRoomReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Create new hotel room
      tags:
      - Hotel Room
  /hotel-room/filter:
    get:
      description: Filter hotel room in a hotel
      parameters:
      - in: query
        name: hotel_id
        type: string
        x-order: "1"
      - in: query
        name: balcony
        type: boolean
        x-order: "2"
      - in: query
        name: bath_tub
        type: boolean
        x-order: "3"
      - in: query
        name: kitchen
        type: boolean
        x-order: "4"
      - in: query
        name: non_smoking
        type: boolean
        x-order: "5"
      - example: acs | desc
        in: query
        name: price_order
        type: string
        x-order: "6"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Filter hotel room
      tags:
      - Hotel Room
  /hotel/{hotel_id}:
    get:
      description: Get detail hotel
      parameters:
      - description: Hotel ID
        in: path
        name: hotel_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Get detail hotel
      tags:
      - Hotel
  /hotel/create:
    post:
      description: Create new hotel, requires authentication with owner role
      parameters:
      - description: CreateHotelReq JSON
        in: body
        name: CreateHotelReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateHotelReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Create new hotel
      tags:
      - Hotel
  /hotel/filter:
    get:
      description: Filter hotel
      parameters:
      - in: query
        name: name
        type: string
        x-order: "1"
      - in: query
        name: province_code
        type: string
        x-order: "2"
      - in: query
        name: district_code
        type: string
        x-order: "3"
      - in: query
        name: ward_code
        type: string
        x-order: "4"
      - example: acs | desc
        in: query
        name: price_order
        type: string
        x-order: "5"
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Filter hotel
      tags:
      - Hotel
  /hotel/my-hotel:
    get:
      description: Get detail my hotel
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Get detail my hotel
      tags:
      - Hotel
  /region/list-district:
    get:
      description: List all districts of a province
      parameters:
      - description: Province code
        in: query
        name: province_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: List districts
      tags:
      - Region
  /region/list-province:
    get:
      description: List all provinces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: List provinces
      tags:
      - Region
  /region/list-ward:
    get:
      description: List all wards of a district
      parameters:
      - description: District code
        in: query
        name: district_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: List wards
      tags:
      - Region
  /token/refresh-token:
    get:
      description: Get new access token and refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Refresh token
      tags:
      - Token
  /upload/media:
    post:
      consumes:
      - multipart/form-data
      description: Upload media files to the server and store them in AWS S3
      parameters:
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Upload media files
      tags:
      - Upload
  /user/change-password:
    post:
      description: Change password
      parameters:
      - description: ChangePasswordReq JSON
        in: body
        name: ChangePasswordReq
        required: true
        schema:
          $ref: '#/definitions/req.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Change password
      tags:
      - User
  /user/login:
    post:
      description: Login user by email and password
      parameters:
      - description: LoginUserReq JSON
        in: body
        name: LoginUserReq
        required: true
        schema:
          $ref: '#/definitions/req.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Login user
      tags:
      - User
  /user/reset-password:
    post:
      description: Reset password and send new password to email
      parameters:
      - description: ResetPasswordReq JSON
        in: body
        name: ResetPasswordReq
        required: true
        schema:
          $ref: '#/definitions/req.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Reset password
      tags:
      - User
  /user/signup:
    post:
      description: Register new user
      parameters:
      - description: CreateUserReq JSON
        in: body
        name: CreateUserReq
        required: true
        schema:
          $ref: '#/definitions/req.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      summary: Register new user
      tags:
      - User
  /user/update:
    patch:
      description: Update user
      parameters:
      - description: UpdateUserReq JSON
        in: body
        name: UpdateUserReq
        required: true
        schema:
          $ref: '#/definitions/req.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.ErrorResponse'
      security:
      - JWT: []
      summary: Update user
      tags:
      - User
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
